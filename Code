<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Object Cropper</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.18.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd@2.2.2"></script>
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
        }
        
        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        h1 {
            color: var(--dark);
            font-weight: 800;
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            background: linear-gradient(90deg, var(--primary), var(--accent));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            display: inline-block;
        }
        
        .tagline {
            color: var(--dark);
            opacity: 0.8;
            font-size: 1.1rem;
        }
        
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 30px -10px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px -10px rgba(0,0,0,0.15);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 1rem;
            text-align: center;
            font-weight: 600;
        }
        
        .canvas-container {
            position: relative;
            padding: 1rem;
        }
        
        canvas {
            max-width: 100%;
            border-radius: 8px;
            display: block;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            transition: box-shadow 0.3s ease;
            background-color: #f0f0f0;
        }
        
        canvas:hover {
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        /* Bounding box styles */
        .bounding-box {
            position: absolute;
            border: 3px solid var(--accent);
            animation: pulse 2s infinite;
            pointer-events: none;
            border-radius: 4px;
        }
        
        .priority-object {
            border-color: #4cc9f0 !important;
            animation: pulse 1.5s infinite, glow 2s infinite alternate;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(247, 37, 133, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(247, 37, 133, 0); }
            100% { box-shadow: 0 0 0 0 rgba(247, 37, 133, 0); }
        }
        
        @keyframes glow {
            from { box-shadow: 0 0 5px #4cc9f0; }
            to { box-shadow: 0 0 20px #4cc9f0; }
        }
        
        /* Upload button styling */
        .upload-btn {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
            margin: 1rem auto;
            display: block;
            text-align: center;
            max-width: 200px;
        }
        
        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(67, 97, 238, 0.4);
        }
        
        .upload-btn input[type="file"] {
            display: none;
        }
        
        /* Loading indicator */
        .loading {
            text-align: center;
            padding: 1rem;
            position: relative;
        }
        
        .loading-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(67, 97, 238, 0.2);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Object info panel */
        .object-info {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            border-left: 4px solid var(--accent);
        }
        
        .object-info h3 {
            margin-top: 0;
            color: var(--secondary);
        }
        
        .confidence-meter {
            height: 10px;
            background: rgba(67, 97, 238, 0.1);
            border-radius: 5px;
            margin: 0.5rem 0;
            overflow: hidden;
        }
        
        .confidence-level {
            height: 100%;
            background: linear-gradient(90deg, #4cc9f0, var(--primary));
            border-radius: 5px;
            transition: width 0.5s ease;
        }
        
        /* Debug info */
        .debug-info {
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            font-family: monospace;
            font-size: 14px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .debug-info strong {
            color: #4cc9f0;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Smart Object Cropper</h1>
        <p class="tagline">Automatically detects and crops the primary object</p>
    </header>

    <label class="upload-btn">
        Upload Image
        <input type="file" id="imageUpload" accept="image/*">
    </label>

    <div class="container">
        <div class="card">
            <div class="card-header">Original Image</div>
            <div class="canvas-container">
                <canvas id="originalCanvas"></canvas>
                <div id="boundingBox" class="bounding-box" style="display: none;"></div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">Cropped Object</div>
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
                <p>Initializing model...</p>
            </div>
            <div class="canvas-container">
                <canvas id="croppedCanvas"></canvas>
            </div>
            <div id="objectInfo" class="object-info" style="display: none;">
                <h3>Primary Object Detected</h3>
                <p id="objectName">Object: Loading...</p>
                <p id="objectConfidence">Confidence: </p>
                <div class="confidence-meter">
                    <div id="confidenceLevel" class="confidence-level" style="width: 0%"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="card" style="margin-top: 20px;">
        <div class="card-header">Detection Analysis</div>
        <div id="debugInfo" class="debug-info">
            Object detection results will appear here...
        </div>
    </div>

    <script>
        // DOM elements
        const imageUpload = document.getElementById('imageUpload');
        const originalCanvas = document.getElementById('originalCanvas');
        const croppedCanvas = document.getElementById('croppedCanvas');
        const loadingDiv = document.getElementById('loading');
        const boundingBox = document.getElementById('boundingBox');
        const objectInfo = document.getElementById('objectInfo');
        const objectName = document.getElementById('objectName');
        const objectConfidence = document.getElementById('objectConfidence');
        const confidenceLevel = document.getElementById('confidenceLevel');
        const debugInfo = document.getElementById('debugInfo');

        const ctxOriginal = originalCanvas.getContext('2d');
        const ctxCropped = croppedCanvas.getContext('2d');

        let model = null;

        // Priority classes - these will be favored as primary objects
        const PRIORITY_CLASSES = [
            'person', 'face', 'human', 'man', 'woman', 
            'dog', 'cat', 'bird', 'car', 'license plate'
        ];

        // Enhanced object selection algorithm
        function selectPrimaryObject(predictions, imgWidth, imgHeight) {
            if (predictions.length === 0) return null;
            
            // Score each prediction based on multiple factors
            const scoredPredictions = predictions.map(pred => {
                let score = pred.score; // Start with confidence score(0-1)
                
                // Priority boost for important classes
                if (PRIORITY_CLASSES.includes(pred.class)) {
                    score *= 1.8; // Give significant boost to priority classes
                } else if (pred.class.includes('hand')) {
                    score *= 0.6; // Penalize hands to prefer faces
                }
                
                // Size factor (larger objects get higher score)
                const normWidth = pred.bbox[2] / imgWidth;
                const normHeight = pred.bbox[3] / imgHeight;
                const sizeFactor = (normWidth + normHeight) / 2; // Average
                score *= 1 + sizeFactor;
                
                // Centrality factor (objects near center get higher score)
                const centerX = pred.bbox[0] + pred.bbox[2]/2;
                const centerY = pred.bbox[1] + pred.bbox[3]/2;
                const distFromCenter = Math.sqrt(
                    Math.pow(centerX/imgWidth - 0.5, 2) + 
                    Math.pow(centerY/imgHeight - 0.5, 2)
                );
                const centralityFactor = 1 - distFromCenter;
                score *= 1 + centralityFactor * 0.5;
                
                return {
                    ...pred,
                    calculatedScore: score,
                    size: `${Math.round(pred.bbox[2])}x${Math.round(pred.bbox[3])}`,
                    centrality: centralityFactor.toFixed(2)
                };
            });

            // Sort by calculated score (descending)
            scoredPredictions.sort((a, b) => b.calculatedScore - a.calculatedScore);
            
            return {
                primary: scoredPredictions[0],
                debug: scoredPredictions
            };
        }

        // Load TensorFlow.js model
        async function loadModel() {
            try {
                loadingDiv.innerHTML = '<div class="loading-spinner"></div><p>Loading AI model...</p>';
                model = await cocoSsd.load();
                loadingDiv.innerHTML = '<p>Model ready! Upload an image to start</p>';
            } catch (error) {
                loadingDiv.innerHTML = `<p style="color: red;">Error loading model: ${error.message}</p>`;
            }
        }

        // Handle image upload
        imageUpload.addEventListener('change', async (e) => {
            if (!model) {
                alert("Model still loading. Please wait...");
                return;
            }

            const file = e.target.files[0];
            if (!file) return;

            loadingDiv.innerHTML = '<div class="loading-spinner"></div><p>Processing image...</p>';
            boundingBox.style.display = 'none';
            objectInfo.style.display = 'none';

            const img = new Image();
            img.src = URL.createObjectURL(file);
            
            img.onload = async () => {
                // Set canvas dimensions to match image (for accurate detection)
                originalCanvas.width = img.width;
                originalCanvas.height = img.height;
                ctxOriginal.drawImage(img, 0, 0);

                // Detect objects
                const predictions = await model.detect(img);
                loadingDiv.style.display = 'none';

                if (predictions.length === 0) {
                    loadingDiv.innerHTML = '<p>No objects detected. Try another image.</p>';
                    loadingDiv.style.display = 'block';
                    return;
                }

                // Get primary object with scoring
                const { primary: primaryPrediction, debug: scoredPredictions } = 
                    selectPrimaryObject(predictions, img.width, img.height);
                
                // Update debug info
                debugInfo.innerHTML = scoredPredictions.map(pred => {
                    const isPrimary = pred === primaryPrediction;
                    return `
                        ${isPrimary ? '★ ' : '  '}
                        <strong>${pred.class}</strong> | 
                        Conf: ${Math.round(pred.score*100)}% | 
                        Size: ${pred.size} | 
                        Center: ${pred.centrality} | 
                        Score: ${isPrimary ? '<strong>' + pred.calculatedScore.toFixed(2) + '</strong>' : pred.calculatedScore.toFixed(2)}
                    `;
                }).join('<br>');

                // Update object info
                objectName.textContent = `Object: ${primaryPrediction.class}`;
                const confidencePercent = Math.round(primaryPrediction.score * 100);
                objectConfidence.textContent = `Confidence: ${confidencePercent}%`;
                confidenceLevel.style.width = `${confidencePercent}%`;
                objectInfo.style.display = 'block';

                // Get bounding box coordinates
                const [x, y, w, h] = primaryPrediction.bbox;
                
                // Position bounding box overlay
                boundingBox.style.left = `${x}px`;
                boundingBox.style.top = `${y}px`;
                boundingBox.style.width = `${w}px`;
                boundingBox.style.height = `${h}px`;
                boundingBox.style.display = 'block';
                boundingBox.classList.add('priority-object');

                // CROP THE OBJECT - FIXED IMPLEMENTATION
                const cropX = Math.max(0, Math.floor(x));
                const cropY = Math.max(0, Math.floor(y));
                const cropWidth = Math.min(Math.floor(w), img.width - cropX);
                const cropHeight = Math.min(Math.floor(h), img.height - cropY);

                // Set cropped canvas dimensions
                croppedCanvas.width = cropWidth;
                croppedCanvas.height = cropHeight;
                
                // Draw the cropped portion
                ctxCropped.drawImage(
                    img, 
                    cropX, cropY, cropWidth, cropHeight, // Source rectangle
                    0, 0, cropWidth, cropHeight          // Destination rectangle
                );

                // Draw detection on original image
                ctxOriginal.strokeStyle = '#4cc9f0';
                ctxOriginal.lineWidth = 3;
                ctxOriginal.strokeRect(x, y, w, h);
                ctxOriginal.font = 'bold 14px Segoe UI';
                ctxOriginal.fillStyle = '#4361ee';
                ctxOriginal.fillText(
                    `${primaryPrediction.class} (${confidencePercent}%)`,
                    x + 5, 
                    y > 20 ? y - 5 : y + 20
                );
                
                // Scale down canvases for display if they're too large
                const maxDisplaySize = 600;
                const scaleCanvas = (canvas) => {
                    const scale = Math.min(
                        maxDisplaySize / canvas.width,
                        maxDisplaySize / canvas.height
                    );
                    if (scale < 1) {
                        canvas.style.width = `${canvas.width * scale}px`;
                        canvas.style.height = `${canvas.height * scale}px`;
                    } else {
                        canvas.style.width = `${canvas.width}px`;
                        canvas.style.height = `${canvas.height}px`;
                    }
                };
                
                scaleCanvas(originalCanvas);
                scaleCanvas(croppedCanvas);
            };
        });

        // Initialize
        loadModel();
    </script>
</body>
</html>
